// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [student_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [student_id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Projects {
  created_date             Int
  department               String
  description              String
  project_id               Int          @id
  Departments              Departments? @relation(fields: [departmentsDepartment_id], references: [department_id])
  departmentsDepartment_id String?
}

model Departments {
  announcements Announcements[]
  department_id String          @id
  projects      Projects[]
  roles         String[]
}

model Announcements {
  announcement_id          Int          @id
  content                  String
  created_by               String
  image                    String
  title                    String
  updated_date             Int
  uploaded_date            Int
  Departments              Departments? @relation(fields: [departmentsDepartment_id], references: [department_id])
  departmentsDepartment_id String?
}

model User {
  attendance     Int?
  batch          String
  department     String
  discord        String?
  gender         String
  faculty        String
  hobbies        String?
  level          String?
  image          String?
  name           String
  nus_email      String?
  emailVerified  DateTime?
  personal_email String?
  projects       String?
  roles          String
  student_id     String    @id
  telegram       String
  total_events   String?
  wallet         String?
  year           String
  accounts       Account[]
  sessions       Session[]
}
